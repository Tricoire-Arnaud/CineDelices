<!-- Cette page ne marche pas car dans les routes, recipes/catalog marche uniquement-->

<main class="container mx-auto px-4 py-6 sm:py-8">
  <!-- En-tête du catalogue -->
  <div class="text-center mb-8 sm:mb-12">
    <h1 class="text-2xl sm:text-4xl font-bold text-gray-900 mb-3 sm:mb-4">
      Catalogue des Recettes
    </h1>
    <p class="text-base sm:text-lg text-gray-600 max-w-2xl mx-auto">
      Découvrez notre collection de recettes inspirées de vos films et séries
      préférés
    </p>
  </div>

  <!-- Barre de recherche -->
  <div class="mb-6 sm:mb-8">
    <form
      action="/catalogue"
      method="GET"
      class="flex flex-col sm:flex-row justify-center gap-3 sm:gap-4"
    >
      <div class="relative flex-1 max-w-2xl">
        <input
          type="text"
          name="queryRecipes"
          value="<%= currentQueryRecipes %>"
          placeholder="Rechercher une recette..."
          class="w-full px-4 py-2 pl-10 pr-4 text-sm sm:text-base text-gray-700 bg-white border border-gray-300 rounded-full focus:outline-none focus:border-orange-500"
        />
        <div
          class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
        >
          <svg
            class="h-4 w-4 sm:h-5 sm:w-5 text-gray-400"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
              clip-rule="evenodd"
            />
          </svg>
        </div>
      </div>
      <button
        type="submit"
        class="w-full sm:w-auto px-6 py-2 bg-orange-500 text-white rounded-full hover:bg-orange-600 transition-colors duration-300"
      >
        Rechercher
      </button>
    </form>
  </div>

  <!-- Filtres par catégorie -->
  <div class="mb-6 sm:mb-8">
    <div class="flex flex-wrap justify-center gap-2 sm:gap-4 mb-4">
      <button
        class="filter-btn px-3 sm:px-4 py-1.5 sm:py-2 rounded-full text-sm font-medium transition-colors duration-300 <%= selectedCategory === 'all' ? 'bg-orange-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200' %>"
        data-category="all"
      >
        Toutes les recettes
      </button>
      <% categories.forEach(category => { %>
      <button
        class="filter-btn px-3 sm:px-4 py-1.5 sm:py-2 rounded-full text-sm font-medium transition-colors duration-300 <%= selectedCategory === category.id_categorie.toString() ? 'bg-orange-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200' %>"
        data-category="<%= category.id_categorie %>"
      >
        <%= category.libelle %>
      </button>
      <% }); %>
    </div>
  </div>

  <div>
    <% if (noResults) { %>
    <p class="text-center text-gray-600 py-8">
      Aucun résultat pour "<%= currentQueryRecipes %>"
    </p>
    <% } else { %>
    <!-- Grille des recettes -->
    <div
      id="recipes-container"
      class="flex overflow-x-auto space-x-4 md:grid md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-8 pb-4 sm:pb-0"
    >
      <% recipes.forEach((recipe, index) => { %>
      <article
        class="min-w-[280px] sm:min-w-0 recipe-card bg-white rounded-2xl shadow-sm hover:shadow-lg transition-all duration-300 overflow-hidden group flex flex-col h-full"
        data-category="<%= recipe.id_categorie %>"
      >
        <div class="relative aspect-video overflow-hidden">
          <img
            src="/images/<%= recipe.image %>"
            alt="<%= recipe.titre %>"
            class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-500"
          />
          <span
            class="absolute top-4 right-4 px-3 py-1 bg-black/50 text-white text-sm rounded-full backdrop-blur-sm"
          >
            <%= recipe.category.libelle %>
          </span>
        </div>

        <div class="p-4 sm:p-6 flex flex-col flex-grow">
          <h3
            class="text-lg sm:text-xl font-semibold mb-2 group-hover:text-orange-500 transition-colors duration-200"
          >
            <%= recipe.titre %>
          </h3>
          <p class="text-sm sm:text-base text-gray-600 mb-4 line-clamp-2">
            <%= recipe.description %>
          </p>

          <div
            class="flex items-center justify-between text-sm text-gray-500 mb-4 mt-auto"
          >
            <div class="flex items-center">
              <div class="flex">
                <% for(let i = 0; i < 5; i++) { %>
                <svg
                  class="w-3 h-3 sm:w-4 sm:h-4 <%= i < recipe.rating ? 'text-yellow-400' : 'text-gray-300' %>"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"
                  />
                </svg>
                <% } %>
              </div>
              <span class="ml-2">(<%= recipe.reviews %>)</span>
            </div>
            <div class="flex items-center">
              <svg
                class="w-3 h-3 sm:w-4 sm:h-4 mr-1"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
              <%= recipe.temps_preparation %> min
            </div>
          </div>

          <a
            href="/recette/<%= recipe.id_recette %>"
            class="block text-center py-2 sm:py-3 px-4 bg-orange-500 text-white rounded-full hover:bg-orange-600 transition-all duration-300 transform hover:-translate-y-0.5 mt-auto text-sm sm:text-base"
          >
            Voir la recette
          </a>
        </div>
      </article>
      <% }) %>
    </div>
    <% } %>
  </div>

  <!-- Pagination -->
  <div class="mt-12 flex justify-center">
    <nav class="flex items-center space-x-2" aria-label="Pagination">
      <button
        id="prev-page"
        class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"
          />
        </svg>
      </button>

      <div id="page-numbers" class="flex items-center space-x-2">
        <!-- Les numéros de page seront générés dynamiquement -->
      </div>

      <button
        id="next-page"
        class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"
          />
        </svg>
      </button>
    </nav>
  </div>
</main>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const recipesPerPage = 9;
    const recipeCards = document.querySelectorAll(".recipe-card");
    let totalRecipes = recipeCards.length;
    let totalPages = Math.ceil(totalRecipes / recipesPerPage);
    let currentPage = 1;
    let currentFilter = "all";

    const prevButton = document.getElementById("prev-page");
    const nextButton = document.getElementById("next-page");
    const pageNumbers = document.getElementById("page-numbers");
    const filterButtons = document.querySelectorAll(".filter-btn");

    // Fonction pour afficher les recettes de la page courante
    function showRecipesForPage(page) {
      const start = (page - 1) * recipesPerPage;
      const end = start + recipesPerPage;
      let visibleCount = 0;

      recipeCards.forEach((card) => {
        // Vérifier si la carte correspond au filtre actuel
        const cardCategory = card.getAttribute("data-category");
        const matchesFilter =
          currentFilter === "all" || cardCategory === currentFilter;

        if (matchesFilter) {
          if (visibleCount >= start && visibleCount < end) {
            card.style.display = "block";
          } else {
            card.style.display = "none";
          }
          visibleCount++;
        } else {
          card.style.display = "none";
        }
      });

      window.scrollTo({
        top: 0,
        behavior: "smooth",
      });
    }

    // Fonction pour mettre à jour les boutons de pagination
    function updatePagination() {
      const visibleRecipes = Array.from(recipeCards).filter((card) => {
        const cardCategory = card.getAttribute("data-category");
        return currentFilter === "all" || cardCategory === currentFilter;
      }).length;

      totalPages = Math.ceil(visibleRecipes / recipesPerPage);

      prevButton.disabled = currentPage === 1;
      nextButton.disabled = currentPage === totalPages;

      // Générer les numéros de page
      pageNumbers.innerHTML = "";

      // Calcul des pages à afficher
      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, startPage + 4);

      if (endPage - startPage < 4) {
        startPage = Math.max(1, endPage - 4);
      }

      // Première page et ellipsis
      if (startPage > 1) {
        addPageButton(1);
        if (startPage > 2) {
          pageNumbers.appendChild(createEllipsis());
        }
      }

      // Pages numérotées
      for (let i = startPage; i <= endPage; i++) {
        addPageButton(i);
      }

      // Dernière page et ellipsis
      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          pageNumbers.appendChild(createEllipsis());
        }
        addPageButton(totalPages);
      }
    }

    function addPageButton(pageNum) {
      const button = document.createElement("button");
      button.className = `px-4 py-2 rounded-lg transition-colors duration-200 ${
        currentPage === pageNum
          ? "bg-orange-500 text-white"
          : "hover:bg-gray-100"
      }`;
      button.textContent = pageNum;
      button.addEventListener("click", () => {
        if (currentPage !== pageNum) {
          currentPage = pageNum;
          showRecipesForPage(currentPage);
          updatePagination();
        }
      });
      pageNumbers.appendChild(button);
    }

    function createEllipsis() {
      const span = document.createElement("span");
      span.className = "px-4 py-2 text-gray-500";
      span.textContent = "...";
      return span;
    }

    // Fonction de filtrage
    function filterRecipes(category) {
      currentFilter = category;
      currentPage = 1;

      // Mettre à jour les boutons de filtre
      filterButtons.forEach((btn) => {
        if (btn.getAttribute("data-category") === category) {
          btn.classList.remove("bg-gray-100", "text-gray-700");
          btn.classList.add("bg-orange-500", "text-white");
        } else {
          btn.classList.remove("bg-orange-500", "text-white");
          btn.classList.add("bg-gray-100", "text-gray-700");
        }
      });

      showRecipesForPage(1);
      updatePagination();
    }

    // Event Listeners
    prevButton.addEventListener("click", () => {
      if (currentPage > 1) {
        currentPage--;
        showRecipesForPage(currentPage);
        updatePagination();
      }
    });

    nextButton.addEventListener("click", () => {
      if (currentPage < totalPages) {
        currentPage++;
        showRecipesForPage(currentPage);
        updatePagination();
      }
    });

    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const category = button.getAttribute("data-category");
        filterRecipes(category);
      });
    });

    // Initialisation
    filterRecipes("all");
  });

  document.addEventListener("DOMContentLoaded", function () {
    const filterButtons = document.querySelectorAll(".filter-btn");
    const recipeCards = document.querySelectorAll(".recipe-card");
    const searchForm = document.querySelector("form");

    filterButtons.forEach((button) => {
      button.addEventListener("click", function (e) {
        e.preventDefault(); // Empêche le comportement par défaut

        // Mise à jour visuelle des boutons
        filterButtons.forEach((btn) => {
          btn.classList.remove("bg-orange-500", "text-white");
          btn.classList.add(
            "bg-gray-100",
            "text-gray-700",
            "hover:bg-gray-200"
          );
        });
        this.classList.remove(
          "bg-gray-100",
          "text-gray-700",
          "hover:bg-gray-200"
        );
        this.classList.add("bg-orange-500", "text-white");

        const selectedCategory = this.dataset.category;

        // Filtrer les recettes
        recipeCards.forEach((card) => {
          if (
            selectedCategory === "all" ||
            card.dataset.category === selectedCategory
          ) {
            card.style.display = "block";
          } else {
            card.style.display = "none";
          }
        });

        // Mettre à jour l'URL sans recharger la page
        const url = new URL(window.location.href);
        url.searchParams.set("categorie", selectedCategory);
        window.history.pushState({}, "", url);
      });
    });

    // Conserver la sélection au chargement de la page
    const urlParams = new URLSearchParams(window.location.search);
    const currentCategory = urlParams.get("categorie") || "all";
    const activeButton = document.querySelector(
      `[data-category="${currentCategory}"]`
    );
    if (activeButton) {
      activeButton.classList.remove(
        "bg-gray-100",
        "text-gray-700",
        "hover:bg-gray-200"
      );
      activeButton.classList.add("bg-orange-500", "text-white");
    }
  });
</script>
