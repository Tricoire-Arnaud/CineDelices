# docker-compose est un fichier au format YAML
# qui contient toutes les informations / instructions pour :
#  - créer les images d'un projet
#  - créer les conteneurs d'un projet
#  - indiquer les différentes contraintes pour les conteneurs
#  - lier / ordonner les conteneurs
#
# Chaque conteneur est considéré comme un service
# qui permet de faire tourner l'application.
#
# L'instruction de base d'un fichier docker-compose est :
services:
  # notre premier service, c'est notre application (partie applicative)
  # on peut directement lui donner un nom de service (ici app)
  app:
    # on indique comment construire l'image du service.
    # On a déjà un Dockerfile pour la partie applicative :
    # on peut le réutiliser.
    # On indique que la construction de l'image se fait
    # à partir du Dockerfile déjà écrit.
    build:
      context: .
      dockerfile: Dockerfile
    # on déclare que le service doit être accessible sur le port
    # 3000 de l'hôte qui correspond au port 3000 du conteneur.
    # C'est l'équivalent de l'option -p de docker run
    ports:
      # port-hôte:port-conteneur
      - 3000:3000
    # on peut donner un nom au conteneur qui sera créé
    # C'est l'équivalent de l'option --name de docker run
    container_name: cinedelices-app

    volumes:
      - .:/app
      - /app/node_modules

    # notre conteneur app utilise le service db
    # qui doit donc être lancé avant l'application
    # on peut indiquer que l'app dépend de db
    depends_on:
      db:
        condition: service_healthy

    env_file:
      - .env.docker-compose

    command: npm run setup

  # service pour la base de données
  db:
    # on peut donner directement des instructions de construction :
    # on utilise l'image postgres pour ce service, 
    # on n'est pas obligé de passer par un Dockerfile
    image: postgres:17
    container_name: cinedelices-db

    # on déclare les variables d'environnement qui permettent
    # de personnaliser l'image pour notre BDD
    #environment:
    #  POSTGRES_USER: 
    #  POSTGRES_PASSWORD: 
    #  POSTGRES_DB: 

    # plutôt que de mettre des données sensibles
    # dans le docker-compose, on peut les mettre
    # dans un fichier d'environnement
    env_file:
      - .env.docker-compose

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

    # on peut partager un répertoire de notre projet
    # sur notre système hôte avec le conteneur
    # c'est un "bind mount"
    #  - bind : lien
    #  - mount : monter

    volumes:
      # on monte le volume local cinedelice-volume
      # comme volume de /var/lib/postgresql/data
      - cinedelices-volume:/var/lib/postgresql/data
